
class Solution {
public:
    int evalRPN(vector<string>& tokens) {
        stack<int> s;
        for (auto x : tokens) {
            if (x == "+" || x == "-" || x == "/" || x == "*") {
                int op2 = s.top(); s.pop();
                int op1 = s.top(); s.pop();

                if (x == "+") {
                    s.push(op1 + op2);
                } else if (x == "-") {
                    s.push(op1 - op2);
                } else if (x == "*") {
                    s.push(op1 * op2);
                } else if (x == "/") {
                    if (op1 < 0 && op2 > 0) {
                        s.push(-((-op1) / op2)); // Handle negative division correctly
                    } else if (op1 > 0 && op2 < 0) {
                        s.push(- (op1 / (-op2))); // Handle negative division correctly
                    } else {
                        s.push(op1 / op2);
                    }
                }
            } else {
                s.push(stoi(x)); // Convert the string to an integer and push it onto the stack
            }
        }

        return s.top();
    }
};


You are given an array of strings tokens that represents an arithmetic expression in a Reverse Polish Notation.

Evaluate the expression. Return an integer that represents the value of the expression.

Note that:

The valid operators are '+', '-', '*', and '/'.
Each operand may be an integer or another expression.
The division between two integers always truncates toward zero.
There will not be any division by zero.
The input represents a valid arithmetic expression in a reverse polish notation.
The answer and all the intermediate calculations can be represented in a 32-bit integer.
 

Example 1:

Input: tokens = ["2","1","+","3","*"]
Output: 9
Explanation: ((2 + 1) * 3) = 9
Example 2:

Input: tokens = ["4","13","5","/","+"]
Output: 6
Explanation: (4 + (13 / 5)) = 6
Example 3:

Input: tokens = ["10","6","9","3","+","-11","*","/","*","17","+","5","+"]
Output: 22
Explanation: ((10 * (6 / ((9 + 3) * -11))) + 17) + 5
= ((10 * (6 / (12 * -11))) + 17) + 5
= ((10 * (6 / -132)) + 17) + 5
= ((10 * 0) + 17) + 5
= (0 + 17) + 5
= 17 + 5
= 22

Accepted
Runtime: 3 ms
Case 1

Input
tokens =
["4","-2","/","2","-3","-","-"]
Output
-7
Expected
-7
