class Solution {
public:
 //element ke dono side left smallest and right smallest nikalenge phir un do no ko minus kake width nikal aaegi or height to di hi hui hai
      vector<int> leftele(vector<int>& heights, int n) {
        stack<pair<int, int>> s;
        vector<int> v;

        for (int i = 0; i < n; i++) {
            if (s.size() == 0)
                v.push_back(-1);
            else if (s.size() > 0 && s.top().first < heights[i])
                v.push_back(s.top().second);
            else if (s.size() > 0 && s.top().first >= heights[i]) {
                while (s.size() > 0 && s.top().first >= heights[i]) {
                    s.pop();
                }
                if (s.size() == 0)
                    v.push_back(-1);
                else
                    v.push_back(s.top().second);
            }
            s.push({heights[i], i});
        }
        return v;
    }

    vector<int> rightele(vector<int>& heights, int n) {
        stack<pair<int, int>> s;
        vector<int> vi;

        for (int i = n - 1; i >= 0; i--) {
            if (s.size() == 0)
                vi.push_back(n);
            else if (s.size() > 0 && s.top().first < heights[i])
                vi.push_back(s.top().second);
            else if (s.size() > 0 && s.top().first >= heights[i]) {
                while (s.size() > 0 && s.top().first >= heights[i]) {
                    s.pop();
                }
                if (s.size() == 0)
                    vi.push_back(n);
                else
                    vi.push_back(s.top().second);
            }
            s.push({heights[i], i});
        }
        reverse(vi.begin(), vi.end());
        return vi;
    }

    int largestRectangleArea(vector<int>& heights) {
        int n = heights.size();
        if (n == 0)
            return 0;

        vector<int> left = leftele(heights, n);
        vector<int> right = rightele(heights, n);
        vector<int> width(n,0);

        for (int i = 0; i < n; i++)
            width[i] = right[i] - left[i] - 1;

        for (int i = 0; i < n; i++)
            width[i] = width[i] * heights[i];

        int m = *max_element(width.begin(), width.end());
        return m;
    }

};

//BETTER APPROACH
int largestRectangle(vector<int>& heights) {
        int n = heights.size();
        if (n == 0)
            return 0;

        stack<int> s;
        vector<int> left(n), right(n);

        // Find the indices of the first smaller element on the left of each element
        for (int i = 0; i < n; i++) {
            while (!s.empty() && heights[s.top()] >= heights[i]) {
                s.pop();
            }
            left[i] = s.empty() ? -1 : s.top();
            s.push(i);
        }

        while (!s.empty()) s.pop();

        // Find the indices of the first smaller element on the right of each element
        for (int i = n - 1; i >= 0; i--) {
            while (!s.empty() && heights[s.top()] >= heights[i]) {
                s.pop();
            }
            right[i] = s.empty() ? n : s.top();
            s.push(i);
        }

        int maxArea = 0;
        for (int i = 0; i < n; i++) {
            int width = right[i] - left[i] - 1;
            int area = heights[i] * width;
            maxArea = max(maxArea, area);
        }

        return maxArea;
    }


    int largestRectangleArea(vector<int>& heights) {
       return(largestRectangle(heights));
    }


Given an array of integers heights representing the histogram's bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.

 

Example 1:


Input: heights = [2,1,5,6,2,3]
Output: 10
Explanation: The above is a histogram where width of each bar is 1.
The largest rectangle is shown in the red area, which has an area = 10 units.
Example 2:


Input: heights = [2,4]
Output: 4
 
